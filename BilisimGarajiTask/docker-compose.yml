services:
  db:
    image: postgres:16-alpine
    container_name: lms-db
    environment:
      POSTGRES_DB: lms_db
      POSTGRES_USER: postgres
      POSTGRES_PASSWORD: 1234
    ports:
      - "5433:5432"   # dışarıdan erişmek istersen
    volumes:
      - db_data:/var/lib/postgresql/data
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U postgres -d lms_db"]
      interval: 5s
      timeout: 3s
      retries: 20
    networks:
      - app_network

  redis:
    image: redis:7-alpine
    container_name: lms-redis
    command: [ "redis-server", "--appendonly", "yes" ]
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    healthcheck:
      test: [ "CMD", "redis-cli", "ping" ]
      interval: 5s
      timeout: 3s
      retries: 20
    networks:
      - app_network

  app:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: lms-app
    depends_on:
      db:
        condition: service_healthy
      redis:
        condition: service_healthy
    environment:
      DB_HOST: db
      DB_PORT: 5432
      DB_NAME: lms_db
      DB_USER: postgres
      DB_PASSWORD: 1234

      JWT_SECRET: 1f4a7b9c2d3e4f60718293a4b5c6d7e81f4a7b9c2d3e4f60718293a4b5c6d7e8
      JAVA_OPTS: "-Xms256m -Xmx512m"
    ports:
      - "8080:8080"
    restart: unless-stopped
    networks:
      - app_network

volumes:
  db_data:
  redis_data:

networks:
  app_network:
    driver: bridge
